{
  "tools": [
    {
      "name": "help",
      "source": null,
      "alias": null,
      "description": "Display help information about available functions",
      "type": "docker",
      "content": "\npython /app/main.py help\n",
      "content_url": null,
      "args": [],
      "env": [],
      "secrets": [
        "AKAMAI_ACCESS_TOKEN",
        "AKAMAI_CLIENT_SECRET",
        "AKAMAI_CLIENT_TOKEN",
        "AKAMAI_HOST",
        "AWS_ACCESS_KEY_ID",
        "AWS_SECRET_ACCESS_KEY",
        "AWS_SESSION_TOKEN",
        "CCI_LDAP_URL",
        "CCI_ADMIN_USER",
        "CCI_ADMIN_PASSWORD",
        "AAD_CONTROLTOWER_ROLEACCESS_SECRET",
        "AAD_PYTHON_AZUREAD_AWS_SECRET",
        "AWS_SSO_IDENTITY_STORE_ID",
        "AWS_SSO_IDENTITY_STORE_ARN",
        "AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS",
        "AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS",
        "AWS_GLOBAL_GROUP_ID_POWER_USER",
        "AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS",
        "TEAMS_INCOMING_HOOK_URL"
      ],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "ttl.sh/clearly-gen3:latest",
      "long_running": false,
      "on_start": null,
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"help\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>python /app/main.py help<br/>...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: ttl.sh/clearly-gen3:latest\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n        Secrets(\"Secrets:<br/>AKAMAI_ACCESS_TOKEN<br/>AKAMAI_CLIENT_SECRET<br/>AKAMAI_CLIENT_TOKEN<br/>AKAMAI_HOST<br/>AWS_ACCESS_KEY_ID<br/>AWS_SECRET_ACCESS_KEY<br/>AWS_SESSION_TOKEN<br/>CCI_LDAP_URL<br/>CCI_ADMIN_USER<br/>CCI_ADMIN_PASSWORD<br/>AAD_CONTROLTOWER_ROLEACCESS_SECRET<br/>AAD_PYTHON_AZUREAD_AWS_SECRET<br/>AWS_SSO_IDENTITY_STORE_ID<br/>AWS_SSO_IDENTITY_STORE_ARN<br/>AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS<br/>AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS<br/>AWS_GLOBAL_GROUP_ID_POWER_USER<br/>AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS<br/>TEAMS_INCOMING_HOOK_URL\"):::envClass\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    },
    {
      "name": "direct_billing_network_creation_additions",
      "source": null,
      "alias": null,
      "description": "Add additional network configurations for direct billing",
      "type": "docker",
      "content": "\npython /app/main.py direct_billing_network_creation_additions {vpc_id} {entity_acronym} {entity_locale} {entity_environment} {gateway_id}\n",
      "content_url": null,
      "args": [
        {
          "name": "vpc_id",
          "type": null,
          "description": "VPC ID",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        },
        {
          "name": "entity_acronym",
          "type": null,
          "description": "Entity acronym",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        },
        {
          "name": "entity_locale",
          "type": null,
          "description": "Entity locale",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        },
        {
          "name": "entity_environment",
          "type": null,
          "description": "Entity environment",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        },
        {
          "name": "gateway_id",
          "type": null,
          "description": "Gateway ID",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        }
      ],
      "env": [],
      "secrets": [
        "AKAMAI_ACCESS_TOKEN",
        "AKAMAI_CLIENT_SECRET",
        "AKAMAI_CLIENT_TOKEN",
        "AKAMAI_HOST",
        "AWS_ACCESS_KEY_ID",
        "AWS_SECRET_ACCESS_KEY",
        "AWS_SESSION_TOKEN",
        "CCI_LDAP_URL",
        "CCI_ADMIN_USER",
        "CCI_ADMIN_PASSWORD",
        "AAD_CONTROLTOWER_ROLEACCESS_SECRET",
        "AAD_PYTHON_AZUREAD_AWS_SECRET",
        "AWS_SSO_IDENTITY_STORE_ID",
        "AWS_SSO_IDENTITY_STORE_ARN",
        "AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS",
        "AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS",
        "AWS_GLOBAL_GROUP_ID_POWER_USER",
        "AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS",
        "TEAMS_INCOMING_HOOK_URL"
      ],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "ttl.sh/clearly-gen3:latest",
      "long_running": false,
      "on_start": null,
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"direct_billing_network_creation_additions\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n        Param0(\"vpc_id (Optional)<br/>VPC ID\"):::paramClass\n        Param1(\"entity_acronym (Optional)<br/>Entity acronym\"):::paramClass\n        Param2(\"entity_locale (Optional)<br/>Entity locale\"):::paramClass\n        Param3(\"entity_environment (Optional)<br/>Entity environment\"):::paramClass\n        Param4(\"gateway_id (Optional)<br/>Gateway ID\"):::paramClass\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>python /app/main.py direct_billing_network_creati...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: ttl.sh/clearly-gen3:latest\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n        Secrets(\"Secrets:<br/>AKAMAI_ACCESS_TOKEN<br/>AKAMAI_CLIENT_SECRET<br/>AKAMAI_CLIENT_TOKEN<br/>AKAMAI_HOST<br/>AWS_ACCESS_KEY_ID<br/>AWS_SECRET_ACCESS_KEY<br/>AWS_SESSION_TOKEN<br/>CCI_LDAP_URL<br/>CCI_ADMIN_USER<br/>CCI_ADMIN_PASSWORD<br/>AAD_CONTROLTOWER_ROLEACCESS_SECRET<br/>AAD_PYTHON_AZUREAD_AWS_SECRET<br/>AWS_SSO_IDENTITY_STORE_ID<br/>AWS_SSO_IDENTITY_STORE_ARN<br/>AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS<br/>AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS<br/>AWS_GLOBAL_GROUP_ID_POWER_USER<br/>AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS<br/>TEAMS_INCOMING_HOOK_URL\"):::envClass\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    },
    {
      "name": "test_akamai",
      "source": null,
      "alias": null,
      "description": "Test Akamai connection",
      "type": "docker",
      "content": "\npython /app/main.py test_akamai\n",
      "content_url": null,
      "args": [],
      "env": [],
      "secrets": [
        "AKAMAI_ACCESS_TOKEN",
        "AKAMAI_CLIENT_SECRET",
        "AKAMAI_CLIENT_TOKEN",
        "AKAMAI_HOST",
        "AWS_ACCESS_KEY_ID",
        "AWS_SECRET_ACCESS_KEY",
        "AWS_SESSION_TOKEN",
        "CCI_LDAP_URL",
        "CCI_ADMIN_USER",
        "CCI_ADMIN_PASSWORD",
        "AAD_CONTROLTOWER_ROLEACCESS_SECRET",
        "AAD_PYTHON_AZUREAD_AWS_SECRET",
        "AWS_SSO_IDENTITY_STORE_ID",
        "AWS_SSO_IDENTITY_STORE_ARN",
        "AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS",
        "AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS",
        "AWS_GLOBAL_GROUP_ID_POWER_USER",
        "AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS",
        "TEAMS_INCOMING_HOOK_URL"
      ],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "ttl.sh/clearly-gen3:latest",
      "long_running": false,
      "on_start": null,
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"test_akamai\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>python /app/main.py test_akamai<br/>...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: ttl.sh/clearly-gen3:latest\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n        Secrets(\"Secrets:<br/>AKAMAI_ACCESS_TOKEN<br/>AKAMAI_CLIENT_SECRET<br/>AKAMAI_CLIENT_TOKEN<br/>AKAMAI_HOST<br/>AWS_ACCESS_KEY_ID<br/>AWS_SECRET_ACCESS_KEY<br/>AWS_SESSION_TOKEN<br/>CCI_LDAP_URL<br/>CCI_ADMIN_USER<br/>CCI_ADMIN_PASSWORD<br/>AAD_CONTROLTOWER_ROLEACCESS_SECRET<br/>AAD_PYTHON_AZUREAD_AWS_SECRET<br/>AWS_SSO_IDENTITY_STORE_ID<br/>AWS_SSO_IDENTITY_STORE_ARN<br/>AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS<br/>AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS<br/>AWS_GLOBAL_GROUP_ID_POWER_USER<br/>AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS<br/>TEAMS_INCOMING_HOOK_URL\"):::envClass\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    },
    {
      "name": "create_zone",
      "source": null,
      "alias": null,
      "description": "Create DNS zone in Akamai",
      "type": "docker",
      "content": "\npython /app/main.py create_zone {zone}\n",
      "content_url": null,
      "args": [
        {
          "name": "zone",
          "type": null,
          "description": "Zone name to create",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        }
      ],
      "env": [],
      "secrets": [
        "AKAMAI_ACCESS_TOKEN",
        "AKAMAI_CLIENT_SECRET",
        "AKAMAI_CLIENT_TOKEN",
        "AKAMAI_HOST",
        "AWS_ACCESS_KEY_ID",
        "AWS_SECRET_ACCESS_KEY",
        "AWS_SESSION_TOKEN",
        "CCI_LDAP_URL",
        "CCI_ADMIN_USER",
        "CCI_ADMIN_PASSWORD",
        "AAD_CONTROLTOWER_ROLEACCESS_SECRET",
        "AAD_PYTHON_AZUREAD_AWS_SECRET",
        "AWS_SSO_IDENTITY_STORE_ID",
        "AWS_SSO_IDENTITY_STORE_ARN",
        "AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS",
        "AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS",
        "AWS_GLOBAL_GROUP_ID_POWER_USER",
        "AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS",
        "TEAMS_INCOMING_HOOK_URL"
      ],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "ttl.sh/clearly-gen3:latest",
      "long_running": false,
      "on_start": null,
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"create_zone\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n        Param0(\"zone (Optional)<br/>Zone name to create\"):::paramClass\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>python /app/main.py create_zone {zone}<br/>...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: ttl.sh/clearly-gen3:latest\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n        Secrets(\"Secrets:<br/>AKAMAI_ACCESS_TOKEN<br/>AKAMAI_CLIENT_SECRET<br/>AKAMAI_CLIENT_TOKEN<br/>AKAMAI_HOST<br/>AWS_ACCESS_KEY_ID<br/>AWS_SECRET_ACCESS_KEY<br/>AWS_SESSION_TOKEN<br/>CCI_LDAP_URL<br/>CCI_ADMIN_USER<br/>CCI_ADMIN_PASSWORD<br/>AAD_CONTROLTOWER_ROLEACCESS_SECRET<br/>AAD_PYTHON_AZUREAD_AWS_SECRET<br/>AWS_SSO_IDENTITY_STORE_ID<br/>AWS_SSO_IDENTITY_STORE_ARN<br/>AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS<br/>AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS<br/>AWS_GLOBAL_GROUP_ID_POWER_USER<br/>AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS<br/>TEAMS_INCOMING_HOOK_URL\"):::envClass\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    },
    {
      "name": "create_dns_record",
      "source": null,
      "alias": null,
      "description": "Create DNS record in Akamai",
      "type": "docker",
      "content": "\npython /app/main.py create_dns_record {zone} {record_type} {record_name} {record_value} {ttl}\n",
      "content_url": null,
      "args": [
        {
          "name": "zone",
          "type": null,
          "description": "Zone name",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        },
        {
          "name": "record_type",
          "type": null,
          "description": "DNS record type",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        },
        {
          "name": "record_name",
          "type": null,
          "description": "DNS record name",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        },
        {
          "name": "record_value",
          "type": null,
          "description": "DNS record value",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        },
        {
          "name": "ttl",
          "type": null,
          "description": "TTL value",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        }
      ],
      "env": [],
      "secrets": [
        "AKAMAI_ACCESS_TOKEN",
        "AKAMAI_CLIENT_SECRET",
        "AKAMAI_CLIENT_TOKEN",
        "AKAMAI_HOST",
        "AWS_ACCESS_KEY_ID",
        "AWS_SECRET_ACCESS_KEY",
        "AWS_SESSION_TOKEN",
        "CCI_LDAP_URL",
        "CCI_ADMIN_USER",
        "CCI_ADMIN_PASSWORD",
        "AAD_CONTROLTOWER_ROLEACCESS_SECRET",
        "AAD_PYTHON_AZUREAD_AWS_SECRET",
        "AWS_SSO_IDENTITY_STORE_ID",
        "AWS_SSO_IDENTITY_STORE_ARN",
        "AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS",
        "AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS",
        "AWS_GLOBAL_GROUP_ID_POWER_USER",
        "AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS",
        "TEAMS_INCOMING_HOOK_URL"
      ],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "ttl.sh/clearly-gen3:latest",
      "long_running": false,
      "on_start": null,
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"create_dns_record\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n        Param0(\"zone (Optional)<br/>Zone name\"):::paramClass\n        Param1(\"record_type (Optional)<br/>DNS record type\"):::paramClass\n        Param2(\"record_name (Optional)<br/>DNS record name\"):::paramClass\n        Param3(\"record_value (Optional)<br/>DNS record value\"):::paramClass\n        Param4(\"ttl (Optional)<br/>TTL value\"):::paramClass\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>python /app/main.py create_dns_record {zone} {rec...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: ttl.sh/clearly-gen3:latest\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n        Secrets(\"Secrets:<br/>AKAMAI_ACCESS_TOKEN<br/>AKAMAI_CLIENT_SECRET<br/>AKAMAI_CLIENT_TOKEN<br/>AKAMAI_HOST<br/>AWS_ACCESS_KEY_ID<br/>AWS_SECRET_ACCESS_KEY<br/>AWS_SESSION_TOKEN<br/>CCI_LDAP_URL<br/>CCI_ADMIN_USER<br/>CCI_ADMIN_PASSWORD<br/>AAD_CONTROLTOWER_ROLEACCESS_SECRET<br/>AAD_PYTHON_AZUREAD_AWS_SECRET<br/>AWS_SSO_IDENTITY_STORE_ID<br/>AWS_SSO_IDENTITY_STORE_ARN<br/>AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS<br/>AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS<br/>AWS_GLOBAL_GROUP_ID_POWER_USER<br/>AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS<br/>TEAMS_INCOMING_HOOK_URL\"):::envClass\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    },
    {
      "name": "apply_zone_changelist",
      "source": null,
      "alias": null,
      "description": "Apply zone changelist in Akamai",
      "type": "docker",
      "content": "\npython /app/main.py apply_zone_changelist {zone}\n",
      "content_url": null,
      "args": [
        {
          "name": "zone",
          "type": null,
          "description": "Zone name",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        }
      ],
      "env": [],
      "secrets": [
        "AKAMAI_ACCESS_TOKEN",
        "AKAMAI_CLIENT_SECRET",
        "AKAMAI_CLIENT_TOKEN",
        "AKAMAI_HOST",
        "AWS_ACCESS_KEY_ID",
        "AWS_SECRET_ACCESS_KEY",
        "AWS_SESSION_TOKEN",
        "CCI_LDAP_URL",
        "CCI_ADMIN_USER",
        "CCI_ADMIN_PASSWORD",
        "AAD_CONTROLTOWER_ROLEACCESS_SECRET",
        "AAD_PYTHON_AZUREAD_AWS_SECRET",
        "AWS_SSO_IDENTITY_STORE_ID",
        "AWS_SSO_IDENTITY_STORE_ARN",
        "AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS",
        "AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS",
        "AWS_GLOBAL_GROUP_ID_POWER_USER",
        "AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS",
        "TEAMS_INCOMING_HOOK_URL"
      ],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "ttl.sh/clearly-gen3:latest",
      "long_running": false,
      "on_start": null,
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"apply_zone_changelist\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n        Param0(\"zone (Optional)<br/>Zone name\"):::paramClass\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>python /app/main.py apply_zone_changelist {zone}<br/>...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: ttl.sh/clearly-gen3:latest\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n        Secrets(\"Secrets:<br/>AKAMAI_ACCESS_TOKEN<br/>AKAMAI_CLIENT_SECRET<br/>AKAMAI_CLIENT_TOKEN<br/>AKAMAI_HOST<br/>AWS_ACCESS_KEY_ID<br/>AWS_SECRET_ACCESS_KEY<br/>AWS_SESSION_TOKEN<br/>CCI_LDAP_URL<br/>CCI_ADMIN_USER<br/>CCI_ADMIN_PASSWORD<br/>AAD_CONTROLTOWER_ROLEACCESS_SECRET<br/>AAD_PYTHON_AZUREAD_AWS_SECRET<br/>AWS_SSO_IDENTITY_STORE_ID<br/>AWS_SSO_IDENTITY_STORE_ARN<br/>AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS<br/>AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS<br/>AWS_GLOBAL_GROUP_ID_POWER_USER<br/>AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS<br/>TEAMS_INCOMING_HOOK_URL\"):::envClass\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    },
    {
      "name": "migrate_aws_zone_records_to_akamai",
      "source": null,
      "alias": null,
      "description": "Migrate AWS zone records to Akamai",
      "type": "docker",
      "content": "\npython /app/main.py migrate_aws_zone_records_to_akamai {zone}\n",
      "content_url": null,
      "args": [
        {
          "name": "zone",
          "type": null,
          "description": "Zone name",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        }
      ],
      "env": [],
      "secrets": [
        "AKAMAI_ACCESS_TOKEN",
        "AKAMAI_CLIENT_SECRET",
        "AKAMAI_CLIENT_TOKEN",
        "AKAMAI_HOST",
        "AWS_ACCESS_KEY_ID",
        "AWS_SECRET_ACCESS_KEY",
        "AWS_SESSION_TOKEN",
        "CCI_LDAP_URL",
        "CCI_ADMIN_USER",
        "CCI_ADMIN_PASSWORD",
        "AAD_CONTROLTOWER_ROLEACCESS_SECRET",
        "AAD_PYTHON_AZUREAD_AWS_SECRET",
        "AWS_SSO_IDENTITY_STORE_ID",
        "AWS_SSO_IDENTITY_STORE_ARN",
        "AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS",
        "AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS",
        "AWS_GLOBAL_GROUP_ID_POWER_USER",
        "AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS",
        "TEAMS_INCOMING_HOOK_URL"
      ],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "ttl.sh/clearly-gen3:latest",
      "long_running": false,
      "on_start": null,
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"migrate_aws_zone_records_to_akamai\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n        Param0(\"zone (Optional)<br/>Zone name\"):::paramClass\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>python /app/main.py migrate_aws_zone_records_to_a...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: ttl.sh/clearly-gen3:latest\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n        Secrets(\"Secrets:<br/>AKAMAI_ACCESS_TOKEN<br/>AKAMAI_CLIENT_SECRET<br/>AKAMAI_CLIENT_TOKEN<br/>AKAMAI_HOST<br/>AWS_ACCESS_KEY_ID<br/>AWS_SECRET_ACCESS_KEY<br/>AWS_SESSION_TOKEN<br/>CCI_LDAP_URL<br/>CCI_ADMIN_USER<br/>CCI_ADMIN_PASSWORD<br/>AAD_CONTROLTOWER_ROLEACCESS_SECRET<br/>AAD_PYTHON_AZUREAD_AWS_SECRET<br/>AWS_SSO_IDENTITY_STORE_ID<br/>AWS_SSO_IDENTITY_STORE_ARN<br/>AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS<br/>AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS<br/>AWS_GLOBAL_GROUP_ID_POWER_USER<br/>AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS<br/>TEAMS_INCOMING_HOOK_URL\"):::envClass\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    },
    {
      "name": "migrate_single_aws_zone_to_akamai",
      "source": null,
      "alias": null,
      "description": "Migrate single AWS zone to Akamai",
      "type": "docker",
      "content": "\npython /app/main.py migrate_single_aws_zone_to_akamai {zone}\n",
      "content_url": null,
      "args": [
        {
          "name": "zone",
          "type": null,
          "description": "Zone name",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        }
      ],
      "env": [],
      "secrets": [
        "AKAMAI_ACCESS_TOKEN",
        "AKAMAI_CLIENT_SECRET",
        "AKAMAI_CLIENT_TOKEN",
        "AKAMAI_HOST",
        "AWS_ACCESS_KEY_ID",
        "AWS_SECRET_ACCESS_KEY",
        "AWS_SESSION_TOKEN",
        "CCI_LDAP_URL",
        "CCI_ADMIN_USER",
        "CCI_ADMIN_PASSWORD",
        "AAD_CONTROLTOWER_ROLEACCESS_SECRET",
        "AAD_PYTHON_AZUREAD_AWS_SECRET",
        "AWS_SSO_IDENTITY_STORE_ID",
        "AWS_SSO_IDENTITY_STORE_ARN",
        "AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS",
        "AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS",
        "AWS_GLOBAL_GROUP_ID_POWER_USER",
        "AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS",
        "TEAMS_INCOMING_HOOK_URL"
      ],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "ttl.sh/clearly-gen3:latest",
      "long_running": false,
      "on_start": null,
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"migrate_single_aws_zone_to_akamai\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n        Param0(\"zone (Optional)<br/>Zone name\"):::paramClass\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>python /app/main.py migrate_single_aws_zone_to_ak...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: ttl.sh/clearly-gen3:latest\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n        Secrets(\"Secrets:<br/>AKAMAI_ACCESS_TOKEN<br/>AKAMAI_CLIENT_SECRET<br/>AKAMAI_CLIENT_TOKEN<br/>AKAMAI_HOST<br/>AWS_ACCESS_KEY_ID<br/>AWS_SECRET_ACCESS_KEY<br/>AWS_SESSION_TOKEN<br/>CCI_LDAP_URL<br/>CCI_ADMIN_USER<br/>CCI_ADMIN_PASSWORD<br/>AAD_CONTROLTOWER_ROLEACCESS_SECRET<br/>AAD_PYTHON_AZUREAD_AWS_SECRET<br/>AWS_SSO_IDENTITY_STORE_ID<br/>AWS_SSO_IDENTITY_STORE_ARN<br/>AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS<br/>AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS<br/>AWS_GLOBAL_GROUP_ID_POWER_USER<br/>AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS<br/>TEAMS_INCOMING_HOOK_URL\"):::envClass\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    },
    {
      "name": "add_roles_to_aws_account",
      "source": null,
      "alias": null,
      "description": "Add roles to AWS account",
      "type": "docker",
      "content": "\npython /app/main.py add_roles_to_aws_account {account_number} {group_name}\n",
      "content_url": null,
      "args": [
        {
          "name": "account_number",
          "type": null,
          "description": "AWS account number",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        },
        {
          "name": "group_name",
          "type": null,
          "description": "Group name",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        }
      ],
      "env": [],
      "secrets": [
        "AKAMAI_ACCESS_TOKEN",
        "AKAMAI_CLIENT_SECRET",
        "AKAMAI_CLIENT_TOKEN",
        "AKAMAI_HOST",
        "AWS_ACCESS_KEY_ID",
        "AWS_SECRET_ACCESS_KEY",
        "AWS_SESSION_TOKEN",
        "CCI_LDAP_URL",
        "CCI_ADMIN_USER",
        "CCI_ADMIN_PASSWORD",
        "AAD_CONTROLTOWER_ROLEACCESS_SECRET",
        "AAD_PYTHON_AZUREAD_AWS_SECRET",
        "AWS_SSO_IDENTITY_STORE_ID",
        "AWS_SSO_IDENTITY_STORE_ARN",
        "AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS",
        "AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS",
        "AWS_GLOBAL_GROUP_ID_POWER_USER",
        "AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS",
        "TEAMS_INCOMING_HOOK_URL"
      ],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "ttl.sh/clearly-gen3:latest",
      "long_running": false,
      "on_start": null,
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"add_roles_to_aws_account\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n        Param0(\"account_number (Optional)<br/>AWS account number\"):::paramClass\n        Param1(\"group_name (Optional)<br/>Group name\"):::paramClass\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>python /app/main.py add_roles_to_aws_account {acc...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: ttl.sh/clearly-gen3:latest\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n        Secrets(\"Secrets:<br/>AKAMAI_ACCESS_TOKEN<br/>AKAMAI_CLIENT_SECRET<br/>AKAMAI_CLIENT_TOKEN<br/>AKAMAI_HOST<br/>AWS_ACCESS_KEY_ID<br/>AWS_SECRET_ACCESS_KEY<br/>AWS_SESSION_TOKEN<br/>CCI_LDAP_URL<br/>CCI_ADMIN_USER<br/>CCI_ADMIN_PASSWORD<br/>AAD_CONTROLTOWER_ROLEACCESS_SECRET<br/>AAD_PYTHON_AZUREAD_AWS_SECRET<br/>AWS_SSO_IDENTITY_STORE_ID<br/>AWS_SSO_IDENTITY_STORE_ARN<br/>AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS<br/>AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS<br/>AWS_GLOBAL_GROUP_ID_POWER_USER<br/>AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS<br/>TEAMS_INCOMING_HOOK_URL\"):::envClass\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    },
    {
      "name": "create_aws_account",
      "source": null,
      "alias": null,
      "description": "Create new AWS account",
      "type": "docker",
      "content": "\npython /app/main.py create_aws_account {ou_id} {ou_name} {account_name} {account_email}\n",
      "content_url": null,
      "args": [
        {
          "name": "ou_id",
          "type": null,
          "description": "Organization Unit ID",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        },
        {
          "name": "ou_name",
          "type": null,
          "description": "Organization Unit name",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        },
        {
          "name": "account_name",
          "type": null,
          "description": "Account name",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        },
        {
          "name": "account_email",
          "type": null,
          "description": "Account email",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        }
      ],
      "env": [],
      "secrets": [
        "AKAMAI_ACCESS_TOKEN",
        "AKAMAI_CLIENT_SECRET",
        "AKAMAI_CLIENT_TOKEN",
        "AKAMAI_HOST",
        "AWS_ACCESS_KEY_ID",
        "AWS_SECRET_ACCESS_KEY",
        "AWS_SESSION_TOKEN",
        "CCI_LDAP_URL",
        "CCI_ADMIN_USER",
        "CCI_ADMIN_PASSWORD",
        "AAD_CONTROLTOWER_ROLEACCESS_SECRET",
        "AAD_PYTHON_AZUREAD_AWS_SECRET",
        "AWS_SSO_IDENTITY_STORE_ID",
        "AWS_SSO_IDENTITY_STORE_ARN",
        "AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS",
        "AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS",
        "AWS_GLOBAL_GROUP_ID_POWER_USER",
        "AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS",
        "TEAMS_INCOMING_HOOK_URL"
      ],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "ttl.sh/clearly-gen3:latest",
      "long_running": false,
      "on_start": null,
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"create_aws_account\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n        Param0(\"ou_id (Optional)<br/>Organization Unit ID\"):::paramClass\n        Param1(\"ou_name (Optional)<br/>Organization Unit name\"):::paramClass\n        Param2(\"account_name (Optional)<br/>Account name\"):::paramClass\n        Param3(\"account_email (Optional)<br/>Account email\"):::paramClass\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>python /app/main.py create_aws_account {ou_id} {o...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: ttl.sh/clearly-gen3:latest\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n        Secrets(\"Secrets:<br/>AKAMAI_ACCESS_TOKEN<br/>AKAMAI_CLIENT_SECRET<br/>AKAMAI_CLIENT_TOKEN<br/>AKAMAI_HOST<br/>AWS_ACCESS_KEY_ID<br/>AWS_SECRET_ACCESS_KEY<br/>AWS_SESSION_TOKEN<br/>CCI_LDAP_URL<br/>CCI_ADMIN_USER<br/>CCI_ADMIN_PASSWORD<br/>AAD_CONTROLTOWER_ROLEACCESS_SECRET<br/>AAD_PYTHON_AZUREAD_AWS_SECRET<br/>AWS_SSO_IDENTITY_STORE_ID<br/>AWS_SSO_IDENTITY_STORE_ARN<br/>AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS<br/>AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS<br/>AWS_GLOBAL_GROUP_ID_POWER_USER<br/>AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS<br/>TEAMS_INCOMING_HOOK_URL\"):::envClass\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    },
    {
      "name": "migrate_control_tower",
      "source": null,
      "alias": null,
      "description": "Migrate control tower",
      "type": "docker",
      "content": "\npython /app/main.py migrate_control_tower\n",
      "content_url": null,
      "args": [],
      "env": [],
      "secrets": [
        "AKAMAI_ACCESS_TOKEN",
        "AKAMAI_CLIENT_SECRET",
        "AKAMAI_CLIENT_TOKEN",
        "AKAMAI_HOST",
        "AWS_ACCESS_KEY_ID",
        "AWS_SECRET_ACCESS_KEY",
        "AWS_SESSION_TOKEN",
        "CCI_LDAP_URL",
        "CCI_ADMIN_USER",
        "CCI_ADMIN_PASSWORD",
        "AAD_CONTROLTOWER_ROLEACCESS_SECRET",
        "AAD_PYTHON_AZUREAD_AWS_SECRET",
        "AWS_SSO_IDENTITY_STORE_ID",
        "AWS_SSO_IDENTITY_STORE_ARN",
        "AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS",
        "AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS",
        "AWS_GLOBAL_GROUP_ID_POWER_USER",
        "AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS",
        "TEAMS_INCOMING_HOOK_URL"
      ],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "ttl.sh/clearly-gen3:latest",
      "long_running": false,
      "on_start": null,
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"migrate_control_tower\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>python /app/main.py migrate_control_tower<br/>...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: ttl.sh/clearly-gen3:latest\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n        Secrets(\"Secrets:<br/>AKAMAI_ACCESS_TOKEN<br/>AKAMAI_CLIENT_SECRET<br/>AKAMAI_CLIENT_TOKEN<br/>AKAMAI_HOST<br/>AWS_ACCESS_KEY_ID<br/>AWS_SECRET_ACCESS_KEY<br/>AWS_SESSION_TOKEN<br/>CCI_LDAP_URL<br/>CCI_ADMIN_USER<br/>CCI_ADMIN_PASSWORD<br/>AAD_CONTROLTOWER_ROLEACCESS_SECRET<br/>AAD_PYTHON_AZUREAD_AWS_SECRET<br/>AWS_SSO_IDENTITY_STORE_ID<br/>AWS_SSO_IDENTITY_STORE_ARN<br/>AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS<br/>AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS<br/>AWS_GLOBAL_GROUP_ID_POWER_USER<br/>AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS<br/>TEAMS_INCOMING_HOOK_URL\"):::envClass\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    },
    {
      "name": "add_esg_to_all_control_tower_accounts",
      "source": null,
      "alias": null,
      "description": "Add ESG to all control tower accounts",
      "type": "docker",
      "content": "\npython /app/main.py add_esg_to_all_control_tower_accounts {esg_name} {permission_set_arn_secret_key}\n",
      "content_url": null,
      "args": [
        {
          "name": "esg_name",
          "type": null,
          "description": "ESG name",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        },
        {
          "name": "permission_set_arn_secret_key",
          "type": null,
          "description": "Permission set ARN secret key",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        }
      ],
      "env": [],
      "secrets": [
        "AKAMAI_ACCESS_TOKEN",
        "AKAMAI_CLIENT_SECRET",
        "AKAMAI_CLIENT_TOKEN",
        "AKAMAI_HOST",
        "AWS_ACCESS_KEY_ID",
        "AWS_SECRET_ACCESS_KEY",
        "AWS_SESSION_TOKEN",
        "CCI_LDAP_URL",
        "CCI_ADMIN_USER",
        "CCI_ADMIN_PASSWORD",
        "AAD_CONTROLTOWER_ROLEACCESS_SECRET",
        "AAD_PYTHON_AZUREAD_AWS_SECRET",
        "AWS_SSO_IDENTITY_STORE_ID",
        "AWS_SSO_IDENTITY_STORE_ARN",
        "AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS",
        "AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS",
        "AWS_GLOBAL_GROUP_ID_POWER_USER",
        "AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS",
        "TEAMS_INCOMING_HOOK_URL"
      ],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "ttl.sh/clearly-gen3:latest",
      "long_running": false,
      "on_start": null,
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"add_esg_to_all_control_tower_accounts\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n        Param0(\"esg_name (Optional)<br/>ESG name\"):::paramClass\n        Param1(\"permission_set_arn_secret_key (Optional)<br/>Permission set ARN secret key\"):::paramClass\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>python /app/main.py add_esg_to_all_control_tower_...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: ttl.sh/clearly-gen3:latest\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n        Secrets(\"Secrets:<br/>AKAMAI_ACCESS_TOKEN<br/>AKAMAI_CLIENT_SECRET<br/>AKAMAI_CLIENT_TOKEN<br/>AKAMAI_HOST<br/>AWS_ACCESS_KEY_ID<br/>AWS_SECRET_ACCESS_KEY<br/>AWS_SESSION_TOKEN<br/>CCI_LDAP_URL<br/>CCI_ADMIN_USER<br/>CCI_ADMIN_PASSWORD<br/>AAD_CONTROLTOWER_ROLEACCESS_SECRET<br/>AAD_PYTHON_AZUREAD_AWS_SECRET<br/>AWS_SSO_IDENTITY_STORE_ID<br/>AWS_SSO_IDENTITY_STORE_ARN<br/>AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS<br/>AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS<br/>AWS_GLOBAL_GROUP_ID_POWER_USER<br/>AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS<br/>TEAMS_INCOMING_HOOK_URL\"):::envClass\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    },
    {
      "name": "add_esg_to_list_of_control_tower_accounts",
      "source": null,
      "alias": null,
      "description": "Add ESG to list of control tower accounts",
      "type": "docker",
      "content": "\npython /app/main.py add_esg_to_list_of_control_tower_accounts {esg_name} {permission_set_arn_secret_key} {account_numbers}\n",
      "content_url": null,
      "args": [
        {
          "name": "esg_name",
          "type": null,
          "description": "ESG name",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        },
        {
          "name": "permission_set_arn_secret_key",
          "type": null,
          "description": "Permission set ARN secret key",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        },
        {
          "name": "account_numbers",
          "type": null,
          "description": "List of account numbers",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        }
      ],
      "env": [],
      "secrets": [
        "AKAMAI_ACCESS_TOKEN",
        "AKAMAI_CLIENT_SECRET",
        "AKAMAI_CLIENT_TOKEN",
        "AKAMAI_HOST",
        "AWS_ACCESS_KEY_ID",
        "AWS_SECRET_ACCESS_KEY",
        "AWS_SESSION_TOKEN",
        "CCI_LDAP_URL",
        "CCI_ADMIN_USER",
        "CCI_ADMIN_PASSWORD",
        "AAD_CONTROLTOWER_ROLEACCESS_SECRET",
        "AAD_PYTHON_AZUREAD_AWS_SECRET",
        "AWS_SSO_IDENTITY_STORE_ID",
        "AWS_SSO_IDENTITY_STORE_ARN",
        "AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS",
        "AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS",
        "AWS_GLOBAL_GROUP_ID_POWER_USER",
        "AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS",
        "TEAMS_INCOMING_HOOK_URL"
      ],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "ttl.sh/clearly-gen3:latest",
      "long_running": false,
      "on_start": null,
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"add_esg_to_list_of_control_tower_accounts\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n        Param0(\"esg_name (Optional)<br/>ESG name\"):::paramClass\n        Param1(\"permission_set_arn_secret_key (Optional)<br/>Permission set ARN secret key\"):::paramClass\n        Param2(\"account_numbers (Optional)<br/>List of account numbers\"):::paramClass\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>python /app/main.py add_esg_to_list_of_control_to...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: ttl.sh/clearly-gen3:latest\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n        Secrets(\"Secrets:<br/>AKAMAI_ACCESS_TOKEN<br/>AKAMAI_CLIENT_SECRET<br/>AKAMAI_CLIENT_TOKEN<br/>AKAMAI_HOST<br/>AWS_ACCESS_KEY_ID<br/>AWS_SECRET_ACCESS_KEY<br/>AWS_SESSION_TOKEN<br/>CCI_LDAP_URL<br/>CCI_ADMIN_USER<br/>CCI_ADMIN_PASSWORD<br/>AAD_CONTROLTOWER_ROLEACCESS_SECRET<br/>AAD_PYTHON_AZUREAD_AWS_SECRET<br/>AWS_SSO_IDENTITY_STORE_ID<br/>AWS_SSO_IDENTITY_STORE_ARN<br/>AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS<br/>AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS<br/>AWS_GLOBAL_GROUP_ID_POWER_USER<br/>AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS<br/>TEAMS_INCOMING_HOOK_URL\"):::envClass\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    },
    {
      "name": "add_esg_to_single_control_tower_account",
      "source": null,
      "alias": null,
      "description": "Add ESG to single control tower account",
      "type": "docker",
      "content": "\npython /app/main.py add_esg_to_single_control_tower_account {esg_name} {permission_set_arn_secret_key} {account_number}\n",
      "content_url": null,
      "args": [
        {
          "name": "esg_name",
          "type": null,
          "description": "ESG name",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        },
        {
          "name": "permission_set_arn_secret_key",
          "type": null,
          "description": "Permission set ARN secret key",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        },
        {
          "name": "account_number",
          "type": null,
          "description": "Account number",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        }
      ],
      "env": [],
      "secrets": [
        "AKAMAI_ACCESS_TOKEN",
        "AKAMAI_CLIENT_SECRET",
        "AKAMAI_CLIENT_TOKEN",
        "AKAMAI_HOST",
        "AWS_ACCESS_KEY_ID",
        "AWS_SECRET_ACCESS_KEY",
        "AWS_SESSION_TOKEN",
        "CCI_LDAP_URL",
        "CCI_ADMIN_USER",
        "CCI_ADMIN_PASSWORD",
        "AAD_CONTROLTOWER_ROLEACCESS_SECRET",
        "AAD_PYTHON_AZUREAD_AWS_SECRET",
        "AWS_SSO_IDENTITY_STORE_ID",
        "AWS_SSO_IDENTITY_STORE_ARN",
        "AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS",
        "AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS",
        "AWS_GLOBAL_GROUP_ID_POWER_USER",
        "AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS",
        "TEAMS_INCOMING_HOOK_URL"
      ],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "ttl.sh/clearly-gen3:latest",
      "long_running": false,
      "on_start": null,
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"add_esg_to_single_control_tower_account\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n        Param0(\"esg_name (Optional)<br/>ESG name\"):::paramClass\n        Param1(\"permission_set_arn_secret_key (Optional)<br/>Permission set ARN secret key\"):::paramClass\n        Param2(\"account_number (Optional)<br/>Account number\"):::paramClass\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>python /app/main.py add_esg_to_single_control_tow...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: ttl.sh/clearly-gen3:latest\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n        Secrets(\"Secrets:<br/>AKAMAI_ACCESS_TOKEN<br/>AKAMAI_CLIENT_SECRET<br/>AKAMAI_CLIENT_TOKEN<br/>AKAMAI_HOST<br/>AWS_ACCESS_KEY_ID<br/>AWS_SECRET_ACCESS_KEY<br/>AWS_SESSION_TOKEN<br/>CCI_LDAP_URL<br/>CCI_ADMIN_USER<br/>CCI_ADMIN_PASSWORD<br/>AAD_CONTROLTOWER_ROLEACCESS_SECRET<br/>AAD_PYTHON_AZUREAD_AWS_SECRET<br/>AWS_SSO_IDENTITY_STORE_ID<br/>AWS_SSO_IDENTITY_STORE_ARN<br/>AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS<br/>AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS<br/>AWS_GLOBAL_GROUP_ID_POWER_USER<br/>AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS<br/>TEAMS_INCOMING_HOOK_URL\"):::envClass\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    },
    {
      "name": "add_login_name_to_control_tower_role",
      "source": null,
      "alias": null,
      "description": "Add login name to control tower role",
      "type": "docker",
      "content": "\npython /app/main.py add_login_name_to_control_tower_role\n",
      "content_url": null,
      "args": [],
      "env": [],
      "secrets": [
        "AKAMAI_ACCESS_TOKEN",
        "AKAMAI_CLIENT_SECRET",
        "AKAMAI_CLIENT_TOKEN",
        "AKAMAI_HOST",
        "AWS_ACCESS_KEY_ID",
        "AWS_SECRET_ACCESS_KEY",
        "AWS_SESSION_TOKEN",
        "CCI_LDAP_URL",
        "CCI_ADMIN_USER",
        "CCI_ADMIN_PASSWORD",
        "AAD_CONTROLTOWER_ROLEACCESS_SECRET",
        "AAD_PYTHON_AZUREAD_AWS_SECRET",
        "AWS_SSO_IDENTITY_STORE_ID",
        "AWS_SSO_IDENTITY_STORE_ARN",
        "AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS",
        "AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS",
        "AWS_GLOBAL_GROUP_ID_POWER_USER",
        "AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS",
        "TEAMS_INCOMING_HOOK_URL"
      ],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "ttl.sh/clearly-gen3:latest",
      "long_running": false,
      "on_start": null,
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"add_login_name_to_control_tower_role\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>python /app/main.py add_login_name_to_control_tow...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: ttl.sh/clearly-gen3:latest\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n        Secrets(\"Secrets:<br/>AKAMAI_ACCESS_TOKEN<br/>AKAMAI_CLIENT_SECRET<br/>AKAMAI_CLIENT_TOKEN<br/>AKAMAI_HOST<br/>AWS_ACCESS_KEY_ID<br/>AWS_SECRET_ACCESS_KEY<br/>AWS_SESSION_TOKEN<br/>CCI_LDAP_URL<br/>CCI_ADMIN_USER<br/>CCI_ADMIN_PASSWORD<br/>AAD_CONTROLTOWER_ROLEACCESS_SECRET<br/>AAD_PYTHON_AZUREAD_AWS_SECRET<br/>AWS_SSO_IDENTITY_STORE_ID<br/>AWS_SSO_IDENTITY_STORE_ARN<br/>AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS<br/>AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS<br/>AWS_GLOBAL_GROUP_ID_POWER_USER<br/>AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS<br/>TEAMS_INCOMING_HOOK_URL\"):::envClass\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    },
    {
      "name": "add_to_control_tower_role",
      "source": null,
      "alias": null,
      "description": "Add to control tower role",
      "type": "docker",
      "content": "\npython /app/main.py add_to_control_tower_role {acronym} {locale}\n",
      "content_url": null,
      "args": [
        {
          "name": "acronym",
          "type": null,
          "description": "Entity acronym",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        },
        {
          "name": "locale",
          "type": null,
          "description": "Entity locale",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        }
      ],
      "env": [],
      "secrets": [
        "AKAMAI_ACCESS_TOKEN",
        "AKAMAI_CLIENT_SECRET",
        "AKAMAI_CLIENT_TOKEN",
        "AKAMAI_HOST",
        "AWS_ACCESS_KEY_ID",
        "AWS_SECRET_ACCESS_KEY",
        "AWS_SESSION_TOKEN",
        "CCI_LDAP_URL",
        "CCI_ADMIN_USER",
        "CCI_ADMIN_PASSWORD",
        "AAD_CONTROLTOWER_ROLEACCESS_SECRET",
        "AAD_PYTHON_AZUREAD_AWS_SECRET",
        "AWS_SSO_IDENTITY_STORE_ID",
        "AWS_SSO_IDENTITY_STORE_ARN",
        "AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS",
        "AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS",
        "AWS_GLOBAL_GROUP_ID_POWER_USER",
        "AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS",
        "TEAMS_INCOMING_HOOK_URL"
      ],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "ttl.sh/clearly-gen3:latest",
      "long_running": false,
      "on_start": null,
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"add_to_control_tower_role\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n        Param0(\"acronym (Optional)<br/>Entity acronym\"):::paramClass\n        Param1(\"locale (Optional)<br/>Entity locale\"):::paramClass\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>python /app/main.py add_to_control_tower_role {ac...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: ttl.sh/clearly-gen3:latest\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n        Secrets(\"Secrets:<br/>AKAMAI_ACCESS_TOKEN<br/>AKAMAI_CLIENT_SECRET<br/>AKAMAI_CLIENT_TOKEN<br/>AKAMAI_HOST<br/>AWS_ACCESS_KEY_ID<br/>AWS_SECRET_ACCESS_KEY<br/>AWS_SESSION_TOKEN<br/>CCI_LDAP_URL<br/>CCI_ADMIN_USER<br/>CCI_ADMIN_PASSWORD<br/>AAD_CONTROLTOWER_ROLEACCESS_SECRET<br/>AAD_PYTHON_AZUREAD_AWS_SECRET<br/>AWS_SSO_IDENTITY_STORE_ID<br/>AWS_SSO_IDENTITY_STORE_ARN<br/>AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS<br/>AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS<br/>AWS_GLOBAL_GROUP_ID_POWER_USER<br/>AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS<br/>TEAMS_INCOMING_HOOK_URL\"):::envClass\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    },
    {
      "name": "add_default_roles",
      "source": null,
      "alias": null,
      "description": "Add default roles to account",
      "type": "docker",
      "content": "\npython /app/main.py add_default_roles {account}\n",
      "content_url": null,
      "args": [
        {
          "name": "account",
          "type": null,
          "description": "Account number",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        }
      ],
      "env": [],
      "secrets": [
        "AKAMAI_ACCESS_TOKEN",
        "AKAMAI_CLIENT_SECRET",
        "AKAMAI_CLIENT_TOKEN",
        "AKAMAI_HOST",
        "AWS_ACCESS_KEY_ID",
        "AWS_SECRET_ACCESS_KEY",
        "AWS_SESSION_TOKEN",
        "CCI_LDAP_URL",
        "CCI_ADMIN_USER",
        "CCI_ADMIN_PASSWORD",
        "AAD_CONTROLTOWER_ROLEACCESS_SECRET",
        "AAD_PYTHON_AZUREAD_AWS_SECRET",
        "AWS_SSO_IDENTITY_STORE_ID",
        "AWS_SSO_IDENTITY_STORE_ARN",
        "AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS",
        "AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS",
        "AWS_GLOBAL_GROUP_ID_POWER_USER",
        "AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS",
        "TEAMS_INCOMING_HOOK_URL"
      ],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "ttl.sh/clearly-gen3:latest",
      "long_running": false,
      "on_start": null,
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"add_default_roles\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n        Param0(\"account (Optional)<br/>Account number\"):::paramClass\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>python /app/main.py add_default_roles {account}<br/>...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: ttl.sh/clearly-gen3:latest\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n        Secrets(\"Secrets:<br/>AKAMAI_ACCESS_TOKEN<br/>AKAMAI_CLIENT_SECRET<br/>AKAMAI_CLIENT_TOKEN<br/>AKAMAI_HOST<br/>AWS_ACCESS_KEY_ID<br/>AWS_SECRET_ACCESS_KEY<br/>AWS_SESSION_TOKEN<br/>CCI_LDAP_URL<br/>CCI_ADMIN_USER<br/>CCI_ADMIN_PASSWORD<br/>AAD_CONTROLTOWER_ROLEACCESS_SECRET<br/>AAD_PYTHON_AZUREAD_AWS_SECRET<br/>AWS_SSO_IDENTITY_STORE_ID<br/>AWS_SSO_IDENTITY_STORE_ARN<br/>AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS<br/>AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS<br/>AWS_GLOBAL_GROUP_ID_POWER_USER<br/>AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS<br/>TEAMS_INCOMING_HOOK_URL\"):::envClass\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    },
    {
      "name": "add_granular_group_access_roles",
      "source": null,
      "alias": null,
      "description": "Add granular group access roles",
      "type": "docker",
      "content": "\npython /app/main.py add_granular_group_access_roles {account} {entity_acronym} {entity_locale} {env}\n",
      "content_url": null,
      "args": [
        {
          "name": "account",
          "type": null,
          "description": "Account number",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        },
        {
          "name": "entity_acronym",
          "type": null,
          "description": "Entity acronym",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        },
        {
          "name": "entity_locale",
          "type": null,
          "description": "Entity locale",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        },
        {
          "name": "env",
          "type": null,
          "description": "Environment",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        }
      ],
      "env": [],
      "secrets": [
        "AKAMAI_ACCESS_TOKEN",
        "AKAMAI_CLIENT_SECRET",
        "AKAMAI_CLIENT_TOKEN",
        "AKAMAI_HOST",
        "AWS_ACCESS_KEY_ID",
        "AWS_SECRET_ACCESS_KEY",
        "AWS_SESSION_TOKEN",
        "CCI_LDAP_URL",
        "CCI_ADMIN_USER",
        "CCI_ADMIN_PASSWORD",
        "AAD_CONTROLTOWER_ROLEACCESS_SECRET",
        "AAD_PYTHON_AZUREAD_AWS_SECRET",
        "AWS_SSO_IDENTITY_STORE_ID",
        "AWS_SSO_IDENTITY_STORE_ARN",
        "AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS",
        "AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS",
        "AWS_GLOBAL_GROUP_ID_POWER_USER",
        "AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS",
        "TEAMS_INCOMING_HOOK_URL"
      ],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "ttl.sh/clearly-gen3:latest",
      "long_running": false,
      "on_start": null,
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"add_granular_group_access_roles\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n        Param0(\"account (Optional)<br/>Account number\"):::paramClass\n        Param1(\"entity_acronym (Optional)<br/>Entity acronym\"):::paramClass\n        Param2(\"entity_locale (Optional)<br/>Entity locale\"):::paramClass\n        Param3(\"env (Optional)<br/>Environment\"):::paramClass\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>python /app/main.py add_granular_group_access_rol...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: ttl.sh/clearly-gen3:latest\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n        Secrets(\"Secrets:<br/>AKAMAI_ACCESS_TOKEN<br/>AKAMAI_CLIENT_SECRET<br/>AKAMAI_CLIENT_TOKEN<br/>AKAMAI_HOST<br/>AWS_ACCESS_KEY_ID<br/>AWS_SECRET_ACCESS_KEY<br/>AWS_SESSION_TOKEN<br/>CCI_LDAP_URL<br/>CCI_ADMIN_USER<br/>CCI_ADMIN_PASSWORD<br/>AAD_CONTROLTOWER_ROLEACCESS_SECRET<br/>AAD_PYTHON_AZUREAD_AWS_SECRET<br/>AWS_SSO_IDENTITY_STORE_ID<br/>AWS_SSO_IDENTITY_STORE_ARN<br/>AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS<br/>AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS<br/>AWS_GLOBAL_GROUP_ID_POWER_USER<br/>AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS<br/>TEAMS_INCOMING_HOOK_URL\"):::envClass\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    },
    {
      "name": "find_group_id",
      "source": null,
      "alias": null,
      "description": "Find group ID",
      "type": "docker",
      "content": "\npython /app/main.py find_group_id {groupname}\n",
      "content_url": null,
      "args": [
        {
          "name": "groupname",
          "type": null,
          "description": "Group name",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        }
      ],
      "env": [],
      "secrets": [
        "AKAMAI_ACCESS_TOKEN",
        "AKAMAI_CLIENT_SECRET",
        "AKAMAI_CLIENT_TOKEN",
        "AKAMAI_HOST",
        "AWS_ACCESS_KEY_ID",
        "AWS_SECRET_ACCESS_KEY",
        "AWS_SESSION_TOKEN",
        "CCI_LDAP_URL",
        "CCI_ADMIN_USER",
        "CCI_ADMIN_PASSWORD",
        "AAD_CONTROLTOWER_ROLEACCESS_SECRET",
        "AAD_PYTHON_AZUREAD_AWS_SECRET",
        "AWS_SSO_IDENTITY_STORE_ID",
        "AWS_SSO_IDENTITY_STORE_ARN",
        "AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS",
        "AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS",
        "AWS_GLOBAL_GROUP_ID_POWER_USER",
        "AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS",
        "TEAMS_INCOMING_HOOK_URL"
      ],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "ttl.sh/clearly-gen3:latest",
      "long_running": false,
      "on_start": null,
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"find_group_id\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n        Param0(\"groupname (Optional)<br/>Group name\"):::paramClass\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>python /app/main.py find_group_id {groupname}<br/>...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: ttl.sh/clearly-gen3:latest\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n        Secrets(\"Secrets:<br/>AKAMAI_ACCESS_TOKEN<br/>AKAMAI_CLIENT_SECRET<br/>AKAMAI_CLIENT_TOKEN<br/>AKAMAI_HOST<br/>AWS_ACCESS_KEY_ID<br/>AWS_SECRET_ACCESS_KEY<br/>AWS_SESSION_TOKEN<br/>CCI_LDAP_URL<br/>CCI_ADMIN_USER<br/>CCI_ADMIN_PASSWORD<br/>AAD_CONTROLTOWER_ROLEACCESS_SECRET<br/>AAD_PYTHON_AZUREAD_AWS_SECRET<br/>AWS_SSO_IDENTITY_STORE_ID<br/>AWS_SSO_IDENTITY_STORE_ARN<br/>AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS<br/>AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS<br/>AWS_GLOBAL_GROUP_ID_POWER_USER<br/>AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS<br/>TEAMS_INCOMING_HOOK_URL\"):::envClass\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    },
    {
      "name": "create_organizational_unit",
      "source": null,
      "alias": null,
      "description": "Creates organizational unit in the Direct Billing Brands OU",
      "type": "docker",
      "content": "\npython /app/main.py create_organizational_unit {entity_acronym} {entity_locale}\n",
      "content_url": null,
      "args": [
        {
          "name": "entity_acronym",
          "type": null,
          "description": "Entity acronym",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        },
        {
          "name": "entity_locale",
          "type": null,
          "description": "Entity locale",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        }
      ],
      "env": [],
      "secrets": [
        "AKAMAI_ACCESS_TOKEN",
        "AKAMAI_CLIENT_SECRET",
        "AKAMAI_CLIENT_TOKEN",
        "AKAMAI_HOST",
        "AWS_ACCESS_KEY_ID",
        "AWS_SECRET_ACCESS_KEY",
        "AWS_SESSION_TOKEN",
        "CCI_LDAP_URL",
        "CCI_ADMIN_USER",
        "CCI_ADMIN_PASSWORD",
        "AAD_CONTROLTOWER_ROLEACCESS_SECRET",
        "AAD_PYTHON_AZUREAD_AWS_SECRET",
        "AWS_SSO_IDENTITY_STORE_ID",
        "AWS_SSO_IDENTITY_STORE_ARN",
        "AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS",
        "AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS",
        "AWS_GLOBAL_GROUP_ID_POWER_USER",
        "AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS",
        "TEAMS_INCOMING_HOOK_URL"
      ],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "ttl.sh/clearly-gen3:latest",
      "long_running": false,
      "on_start": null,
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"create_organizational_unit\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n        Param0(\"entity_acronym (Optional)<br/>Entity acronym\"):::paramClass\n        Param1(\"entity_locale (Optional)<br/>Entity locale\"):::paramClass\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>python /app/main.py create_organizational_unit {e...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: ttl.sh/clearly-gen3:latest\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n        Secrets(\"Secrets:<br/>AKAMAI_ACCESS_TOKEN<br/>AKAMAI_CLIENT_SECRET<br/>AKAMAI_CLIENT_TOKEN<br/>AKAMAI_HOST<br/>AWS_ACCESS_KEY_ID<br/>AWS_SECRET_ACCESS_KEY<br/>AWS_SESSION_TOKEN<br/>CCI_LDAP_URL<br/>CCI_ADMIN_USER<br/>CCI_ADMIN_PASSWORD<br/>AAD_CONTROLTOWER_ROLEACCESS_SECRET<br/>AAD_PYTHON_AZUREAD_AWS_SECRET<br/>AWS_SSO_IDENTITY_STORE_ID<br/>AWS_SSO_IDENTITY_STORE_ARN<br/>AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS<br/>AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS<br/>AWS_GLOBAL_GROUP_ID_POWER_USER<br/>AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS<br/>TEAMS_INCOMING_HOOK_URL\"):::envClass\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    },
    {
      "name": "direct_billing_account_creation",
      "source": null,
      "alias": null,
      "description": "Creates 4 accounts based on supplied acronym and locale",
      "type": "docker",
      "content": "\npython /app/main.py direct_billing_account_creation {entity_acronym} {entity_locale} {ou_id}\n",
      "content_url": null,
      "args": [
        {
          "name": "entity_acronym",
          "type": null,
          "description": "Entity acronym",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        },
        {
          "name": "entity_locale",
          "type": null,
          "description": "Entity locale",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        },
        {
          "name": "ou_id",
          "type": null,
          "description": "Organization Unit ID",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        }
      ],
      "env": [],
      "secrets": [
        "AKAMAI_ACCESS_TOKEN",
        "AKAMAI_CLIENT_SECRET",
        "AKAMAI_CLIENT_TOKEN",
        "AKAMAI_HOST",
        "AWS_ACCESS_KEY_ID",
        "AWS_SECRET_ACCESS_KEY",
        "AWS_SESSION_TOKEN",
        "CCI_LDAP_URL",
        "CCI_ADMIN_USER",
        "CCI_ADMIN_PASSWORD",
        "AAD_CONTROLTOWER_ROLEACCESS_SECRET",
        "AAD_PYTHON_AZUREAD_AWS_SECRET",
        "AWS_SSO_IDENTITY_STORE_ID",
        "AWS_SSO_IDENTITY_STORE_ARN",
        "AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS",
        "AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS",
        "AWS_GLOBAL_GROUP_ID_POWER_USER",
        "AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS",
        "TEAMS_INCOMING_HOOK_URL"
      ],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "ttl.sh/clearly-gen3:latest",
      "long_running": false,
      "on_start": null,
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"direct_billing_account_creation\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n        Param0(\"entity_acronym (Optional)<br/>Entity acronym\"):::paramClass\n        Param1(\"entity_locale (Optional)<br/>Entity locale\"):::paramClass\n        Param2(\"ou_id (Optional)<br/>Organization Unit ID\"):::paramClass\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>python /app/main.py direct_billing_account_creati...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: ttl.sh/clearly-gen3:latest\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n        Secrets(\"Secrets:<br/>AKAMAI_ACCESS_TOKEN<br/>AKAMAI_CLIENT_SECRET<br/>AKAMAI_CLIENT_TOKEN<br/>AKAMAI_HOST<br/>AWS_ACCESS_KEY_ID<br/>AWS_SECRET_ACCESS_KEY<br/>AWS_SESSION_TOKEN<br/>CCI_LDAP_URL<br/>CCI_ADMIN_USER<br/>CCI_ADMIN_PASSWORD<br/>AAD_CONTROLTOWER_ROLEACCESS_SECRET<br/>AAD_PYTHON_AZUREAD_AWS_SECRET<br/>AWS_SSO_IDENTITY_STORE_ID<br/>AWS_SSO_IDENTITY_STORE_ARN<br/>AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS<br/>AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS<br/>AWS_GLOBAL_GROUP_ID_POWER_USER<br/>AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS<br/>TEAMS_INCOMING_HOOK_URL\"):::envClass\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    },
    {
      "name": "direct_billing_single_account_creation",
      "source": null,
      "alias": null,
      "description": "Create single account for direct billing",
      "type": "docker",
      "content": "\npython /app/main.py direct_billing_single_account_creation {entity_acronym} {entity_locale} {ou_id} {env}\n",
      "content_url": null,
      "args": [
        {
          "name": "entity_acronym",
          "type": null,
          "description": "Entity acronym",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        },
        {
          "name": "entity_locale",
          "type": null,
          "description": "Entity locale",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        },
        {
          "name": "ou_id",
          "type": null,
          "description": "Organization Unit ID",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        },
        {
          "name": "env",
          "type": null,
          "description": "Environment",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        }
      ],
      "env": [],
      "secrets": [
        "AKAMAI_ACCESS_TOKEN",
        "AKAMAI_CLIENT_SECRET",
        "AKAMAI_CLIENT_TOKEN",
        "AKAMAI_HOST",
        "AWS_ACCESS_KEY_ID",
        "AWS_SECRET_ACCESS_KEY",
        "AWS_SESSION_TOKEN",
        "CCI_LDAP_URL",
        "CCI_ADMIN_USER",
        "CCI_ADMIN_PASSWORD",
        "AAD_CONTROLTOWER_ROLEACCESS_SECRET",
        "AAD_PYTHON_AZUREAD_AWS_SECRET",
        "AWS_SSO_IDENTITY_STORE_ID",
        "AWS_SSO_IDENTITY_STORE_ARN",
        "AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS",
        "AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS",
        "AWS_GLOBAL_GROUP_ID_POWER_USER",
        "AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS",
        "TEAMS_INCOMING_HOOK_URL"
      ],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "ttl.sh/clearly-gen3:latest",
      "long_running": false,
      "on_start": null,
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"direct_billing_single_account_creation\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n        Param0(\"entity_acronym (Optional)<br/>Entity acronym\"):::paramClass\n        Param1(\"entity_locale (Optional)<br/>Entity locale\"):::paramClass\n        Param2(\"ou_id (Optional)<br/>Organization Unit ID\"):::paramClass\n        Param3(\"env (Optional)<br/>Environment\"):::paramClass\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>python /app/main.py direct_billing_single_account...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: ttl.sh/clearly-gen3:latest\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n        Secrets(\"Secrets:<br/>AKAMAI_ACCESS_TOKEN<br/>AKAMAI_CLIENT_SECRET<br/>AKAMAI_CLIENT_TOKEN<br/>AKAMAI_HOST<br/>AWS_ACCESS_KEY_ID<br/>AWS_SECRET_ACCESS_KEY<br/>AWS_SESSION_TOKEN<br/>CCI_LDAP_URL<br/>CCI_ADMIN_USER<br/>CCI_ADMIN_PASSWORD<br/>AAD_CONTROLTOWER_ROLEACCESS_SECRET<br/>AAD_PYTHON_AZUREAD_AWS_SECRET<br/>AWS_SSO_IDENTITY_STORE_ID<br/>AWS_SSO_IDENTITY_STORE_ARN<br/>AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS<br/>AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS<br/>AWS_GLOBAL_GROUP_ID_POWER_USER<br/>AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS<br/>TEAMS_INCOMING_HOOK_URL\"):::envClass\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    },
    {
      "name": "direct_billing_network_creation",
      "source": null,
      "alias": null,
      "description": "Create network for direct billing",
      "type": "docker",
      "content": "\npython /app/main.py direct_billing_network_creation {network_address} {account_number} {account_region} {entity_acronym} {entity_locale} {entity_environment}\n",
      "content_url": null,
      "args": [
        {
          "name": "network_address",
          "type": null,
          "description": "Network address",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        },
        {
          "name": "account_number",
          "type": null,
          "description": "Account number",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        },
        {
          "name": "account_region",
          "type": null,
          "description": "Account region",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        },
        {
          "name": "entity_acronym",
          "type": null,
          "description": "Entity acronym",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        },
        {
          "name": "entity_locale",
          "type": null,
          "description": "Entity locale",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        },
        {
          "name": "entity_environment",
          "type": null,
          "description": "Entity environment",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        }
      ],
      "env": [],
      "secrets": [
        "AKAMAI_ACCESS_TOKEN",
        "AKAMAI_CLIENT_SECRET",
        "AKAMAI_CLIENT_TOKEN",
        "AKAMAI_HOST",
        "AWS_ACCESS_KEY_ID",
        "AWS_SECRET_ACCESS_KEY",
        "AWS_SESSION_TOKEN",
        "CCI_LDAP_URL",
        "CCI_ADMIN_USER",
        "CCI_ADMIN_PASSWORD",
        "AAD_CONTROLTOWER_ROLEACCESS_SECRET",
        "AAD_PYTHON_AZUREAD_AWS_SECRET",
        "AWS_SSO_IDENTITY_STORE_ID",
        "AWS_SSO_IDENTITY_STORE_ARN",
        "AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS",
        "AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS",
        "AWS_GLOBAL_GROUP_ID_POWER_USER",
        "AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS",
        "TEAMS_INCOMING_HOOK_URL"
      ],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "ttl.sh/clearly-gen3:latest",
      "long_running": false,
      "on_start": null,
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"direct_billing_network_creation\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n        Param0(\"network_address (Optional)<br/>Network address\"):::paramClass\n        Param1(\"account_number (Optional)<br/>Account number\"):::paramClass\n        Param2(\"account_region (Optional)<br/>Account region\"):::paramClass\n        Param3(\"entity_acronym (Optional)<br/>Entity acronym\"):::paramClass\n        Param4(\"entity_locale (Optional)<br/>Entity locale\"):::paramClass\n        Param5(\"entity_environment (Optional)<br/>Entity environment\"):::paramClass\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>python /app/main.py direct_billing_network_creati...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: ttl.sh/clearly-gen3:latest\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n        Secrets(\"Secrets:<br/>AKAMAI_ACCESS_TOKEN<br/>AKAMAI_CLIENT_SECRET<br/>AKAMAI_CLIENT_TOKEN<br/>AKAMAI_HOST<br/>AWS_ACCESS_KEY_ID<br/>AWS_SECRET_ACCESS_KEY<br/>AWS_SESSION_TOKEN<br/>CCI_LDAP_URL<br/>CCI_ADMIN_USER<br/>CCI_ADMIN_PASSWORD<br/>AAD_CONTROLTOWER_ROLEACCESS_SECRET<br/>AAD_PYTHON_AZUREAD_AWS_SECRET<br/>AWS_SSO_IDENTITY_STORE_ID<br/>AWS_SSO_IDENTITY_STORE_ARN<br/>AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS<br/>AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS<br/>AWS_GLOBAL_GROUP_ID_POWER_USER<br/>AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS<br/>TEAMS_INCOMING_HOOK_URL\"):::envClass\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    },
    {
      "name": "send_teams_message",
      "source": null,
      "alias": null,
      "description": "Send message to Teams channel",
      "type": "docker",
      "content": "\npython /app/main.py send_teams_message {message}\n",
      "content_url": null,
      "args": [
        {
          "name": "message",
          "type": null,
          "description": "Message to send",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        }
      ],
      "env": [],
      "secrets": [
        "AKAMAI_ACCESS_TOKEN",
        "AKAMAI_CLIENT_SECRET",
        "AKAMAI_CLIENT_TOKEN",
        "AKAMAI_HOST",
        "AWS_ACCESS_KEY_ID",
        "AWS_SECRET_ACCESS_KEY",
        "AWS_SESSION_TOKEN",
        "CCI_LDAP_URL",
        "CCI_ADMIN_USER",
        "CCI_ADMIN_PASSWORD",
        "AAD_CONTROLTOWER_ROLEACCESS_SECRET",
        "AAD_PYTHON_AZUREAD_AWS_SECRET",
        "AWS_SSO_IDENTITY_STORE_ID",
        "AWS_SSO_IDENTITY_STORE_ARN",
        "AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS",
        "AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS",
        "AWS_GLOBAL_GROUP_ID_POWER_USER",
        "AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS",
        "TEAMS_INCOMING_HOOK_URL"
      ],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "ttl.sh/clearly-gen3:latest",
      "long_running": false,
      "on_start": null,
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"send_teams_message\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n        Param0(\"message (Optional)<br/>Message to send\"):::paramClass\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>python /app/main.py send_teams_message {message}<br/>...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: ttl.sh/clearly-gen3:latest\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n        Secrets(\"Secrets:<br/>AKAMAI_ACCESS_TOKEN<br/>AKAMAI_CLIENT_SECRET<br/>AKAMAI_CLIENT_TOKEN<br/>AKAMAI_HOST<br/>AWS_ACCESS_KEY_ID<br/>AWS_SECRET_ACCESS_KEY<br/>AWS_SESSION_TOKEN<br/>CCI_LDAP_URL<br/>CCI_ADMIN_USER<br/>CCI_ADMIN_PASSWORD<br/>AAD_CONTROLTOWER_ROLEACCESS_SECRET<br/>AAD_PYTHON_AZUREAD_AWS_SECRET<br/>AWS_SSO_IDENTITY_STORE_ID<br/>AWS_SSO_IDENTITY_STORE_ARN<br/>AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS<br/>AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS<br/>AWS_GLOBAL_GROUP_ID_POWER_USER<br/>AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS<br/>TEAMS_INCOMING_HOOK_URL\"):::envClass\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    },
    {
      "name": "create_security_group",
      "source": null,
      "alias": null,
      "description": "Create security group",
      "type": "docker",
      "content": "\npython /app/main.py create_security_group {group_name} {group_description}\n",
      "content_url": null,
      "args": [
        {
          "name": "group_name",
          "type": null,
          "description": "Group name",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        },
        {
          "name": "group_description",
          "type": null,
          "description": "Group description",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        }
      ],
      "env": [],
      "secrets": [
        "AKAMAI_ACCESS_TOKEN",
        "AKAMAI_CLIENT_SECRET",
        "AKAMAI_CLIENT_TOKEN",
        "AKAMAI_HOST",
        "AWS_ACCESS_KEY_ID",
        "AWS_SECRET_ACCESS_KEY",
        "AWS_SESSION_TOKEN",
        "CCI_LDAP_URL",
        "CCI_ADMIN_USER",
        "CCI_ADMIN_PASSWORD",
        "AAD_CONTROLTOWER_ROLEACCESS_SECRET",
        "AAD_PYTHON_AZUREAD_AWS_SECRET",
        "AWS_SSO_IDENTITY_STORE_ID",
        "AWS_SSO_IDENTITY_STORE_ARN",
        "AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS",
        "AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS",
        "AWS_GLOBAL_GROUP_ID_POWER_USER",
        "AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS",
        "TEAMS_INCOMING_HOOK_URL"
      ],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "ttl.sh/clearly-gen3:latest",
      "long_running": false,
      "on_start": null,
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"create_security_group\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n        Param0(\"group_name (Optional)<br/>Group name\"):::paramClass\n        Param1(\"group_description (Optional)<br/>Group description\"):::paramClass\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>python /app/main.py create_security_group {group_...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: ttl.sh/clearly-gen3:latest\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n        Secrets(\"Secrets:<br/>AKAMAI_ACCESS_TOKEN<br/>AKAMAI_CLIENT_SECRET<br/>AKAMAI_CLIENT_TOKEN<br/>AKAMAI_HOST<br/>AWS_ACCESS_KEY_ID<br/>AWS_SECRET_ACCESS_KEY<br/>AWS_SESSION_TOKEN<br/>CCI_LDAP_URL<br/>CCI_ADMIN_USER<br/>CCI_ADMIN_PASSWORD<br/>AAD_CONTROLTOWER_ROLEACCESS_SECRET<br/>AAD_PYTHON_AZUREAD_AWS_SECRET<br/>AWS_SSO_IDENTITY_STORE_ID<br/>AWS_SSO_IDENTITY_STORE_ARN<br/>AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS<br/>AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS<br/>AWS_GLOBAL_GROUP_ID_POWER_USER<br/>AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS<br/>TEAMS_INCOMING_HOOK_URL\"):::envClass\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    },
    {
      "name": "get_entra_application_json",
      "source": null,
      "alias": null,
      "description": "Get Entra application JSON",
      "type": "docker",
      "content": "\npython /app/main.py get_entra_application_json {app_id}\n",
      "content_url": null,
      "args": [
        {
          "name": "app_id",
          "type": null,
          "description": "Application ID",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        }
      ],
      "env": [],
      "secrets": [
        "AKAMAI_ACCESS_TOKEN",
        "AKAMAI_CLIENT_SECRET",
        "AKAMAI_CLIENT_TOKEN",
        "AKAMAI_HOST",
        "AWS_ACCESS_KEY_ID",
        "AWS_SECRET_ACCESS_KEY",
        "AWS_SESSION_TOKEN",
        "CCI_LDAP_URL",
        "CCI_ADMIN_USER",
        "CCI_ADMIN_PASSWORD",
        "AAD_CONTROLTOWER_ROLEACCESS_SECRET",
        "AAD_PYTHON_AZUREAD_AWS_SECRET",
        "AWS_SSO_IDENTITY_STORE_ID",
        "AWS_SSO_IDENTITY_STORE_ARN",
        "AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS",
        "AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS",
        "AWS_GLOBAL_GROUP_ID_POWER_USER",
        "AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS",
        "TEAMS_INCOMING_HOOK_URL"
      ],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "ttl.sh/clearly-gen3:latest",
      "long_running": false,
      "on_start": null,
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"get_entra_application_json\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n        Param0(\"app_id (Optional)<br/>Application ID\"):::paramClass\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>python /app/main.py get_entra_application_json {a...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: ttl.sh/clearly-gen3:latest\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n        Secrets(\"Secrets:<br/>AKAMAI_ACCESS_TOKEN<br/>AKAMAI_CLIENT_SECRET<br/>AKAMAI_CLIENT_TOKEN<br/>AKAMAI_HOST<br/>AWS_ACCESS_KEY_ID<br/>AWS_SECRET_ACCESS_KEY<br/>AWS_SESSION_TOKEN<br/>CCI_LDAP_URL<br/>CCI_ADMIN_USER<br/>CCI_ADMIN_PASSWORD<br/>AAD_CONTROLTOWER_ROLEACCESS_SECRET<br/>AAD_PYTHON_AZUREAD_AWS_SECRET<br/>AWS_SSO_IDENTITY_STORE_ID<br/>AWS_SSO_IDENTITY_STORE_ARN<br/>AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS<br/>AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS<br/>AWS_GLOBAL_GROUP_ID_POWER_USER<br/>AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS<br/>TEAMS_INCOMING_HOOK_URL\"):::envClass\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    },
    {
      "name": "add_devs_to_group",
      "source": null,
      "alias": null,
      "description": "Add developers to group",
      "type": "docker",
      "content": "\npython /app/main.py add_devs_to_group {group_id}\n",
      "content_url": null,
      "args": [
        {
          "name": "group_id",
          "type": null,
          "description": "Group ID",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        }
      ],
      "env": [],
      "secrets": [
        "AKAMAI_ACCESS_TOKEN",
        "AKAMAI_CLIENT_SECRET",
        "AKAMAI_CLIENT_TOKEN",
        "AKAMAI_HOST",
        "AWS_ACCESS_KEY_ID",
        "AWS_SECRET_ACCESS_KEY",
        "AWS_SESSION_TOKEN",
        "CCI_LDAP_URL",
        "CCI_ADMIN_USER",
        "CCI_ADMIN_PASSWORD",
        "AAD_CONTROLTOWER_ROLEACCESS_SECRET",
        "AAD_PYTHON_AZUREAD_AWS_SECRET",
        "AWS_SSO_IDENTITY_STORE_ID",
        "AWS_SSO_IDENTITY_STORE_ARN",
        "AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS",
        "AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS",
        "AWS_GLOBAL_GROUP_ID_POWER_USER",
        "AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS",
        "TEAMS_INCOMING_HOOK_URL"
      ],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "ttl.sh/clearly-gen3:latest",
      "long_running": false,
      "on_start": null,
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"add_devs_to_group\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n        Param0(\"group_id (Optional)<br/>Group ID\"):::paramClass\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>python /app/main.py add_devs_to_group {group_id}<br/>...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: ttl.sh/clearly-gen3:latest\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n        Secrets(\"Secrets:<br/>AKAMAI_ACCESS_TOKEN<br/>AKAMAI_CLIENT_SECRET<br/>AKAMAI_CLIENT_TOKEN<br/>AKAMAI_HOST<br/>AWS_ACCESS_KEY_ID<br/>AWS_SECRET_ACCESS_KEY<br/>AWS_SESSION_TOKEN<br/>CCI_LDAP_URL<br/>CCI_ADMIN_USER<br/>CCI_ADMIN_PASSWORD<br/>AAD_CONTROLTOWER_ROLEACCESS_SECRET<br/>AAD_PYTHON_AZUREAD_AWS_SECRET<br/>AWS_SSO_IDENTITY_STORE_ID<br/>AWS_SSO_IDENTITY_STORE_ARN<br/>AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS<br/>AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS<br/>AWS_GLOBAL_GROUP_ID_POWER_USER<br/>AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS<br/>TEAMS_INCOMING_HOOK_URL\"):::envClass\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    },
    {
      "name": "find_members_of_ldap_groupname",
      "source": null,
      "alias": null,
      "description": "Find members of LDAP group",
      "type": "docker",
      "content": "\npython /app/main.py find_members_of_ldap_groupname {group_name} {search_base}\n",
      "content_url": null,
      "args": [
        {
          "name": "group_name",
          "type": null,
          "description": "Group name",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        },
        {
          "name": "search_base",
          "type": null,
          "description": "Search base",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        }
      ],
      "env": [],
      "secrets": [
        "AKAMAI_ACCESS_TOKEN",
        "AKAMAI_CLIENT_SECRET",
        "AKAMAI_CLIENT_TOKEN",
        "AKAMAI_HOST",
        "AWS_ACCESS_KEY_ID",
        "AWS_SECRET_ACCESS_KEY",
        "AWS_SESSION_TOKEN",
        "CCI_LDAP_URL",
        "CCI_ADMIN_USER",
        "CCI_ADMIN_PASSWORD",
        "AAD_CONTROLTOWER_ROLEACCESS_SECRET",
        "AAD_PYTHON_AZUREAD_AWS_SECRET",
        "AWS_SSO_IDENTITY_STORE_ID",
        "AWS_SSO_IDENTITY_STORE_ARN",
        "AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS",
        "AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS",
        "AWS_GLOBAL_GROUP_ID_POWER_USER",
        "AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS",
        "TEAMS_INCOMING_HOOK_URL"
      ],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "ttl.sh/clearly-gen3:latest",
      "long_running": false,
      "on_start": null,
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"find_members_of_ldap_groupname\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n        Param0(\"group_name (Optional)<br/>Group name\"):::paramClass\n        Param1(\"search_base (Optional)<br/>Search base\"):::paramClass\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>python /app/main.py find_members_of_ldap_groupnam...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: ttl.sh/clearly-gen3:latest\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n        Secrets(\"Secrets:<br/>AKAMAI_ACCESS_TOKEN<br/>AKAMAI_CLIENT_SECRET<br/>AKAMAI_CLIENT_TOKEN<br/>AKAMAI_HOST<br/>AWS_ACCESS_KEY_ID<br/>AWS_SECRET_ACCESS_KEY<br/>AWS_SESSION_TOKEN<br/>CCI_LDAP_URL<br/>CCI_ADMIN_USER<br/>CCI_ADMIN_PASSWORD<br/>AAD_CONTROLTOWER_ROLEACCESS_SECRET<br/>AAD_PYTHON_AZUREAD_AWS_SECRET<br/>AWS_SSO_IDENTITY_STORE_ID<br/>AWS_SSO_IDENTITY_STORE_ARN<br/>AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS<br/>AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS<br/>AWS_GLOBAL_GROUP_ID_POWER_USER<br/>AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS<br/>TEAMS_INCOMING_HOOK_URL\"):::envClass\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    },
    {
      "name": "test_ldap_connection",
      "source": null,
      "alias": null,
      "description": "Test LDAP connection",
      "type": "docker",
      "content": "\npython /app/main.py test_ldap_connection\n",
      "content_url": null,
      "args": [],
      "env": [],
      "secrets": [
        "AKAMAI_ACCESS_TOKEN",
        "AKAMAI_CLIENT_SECRET",
        "AKAMAI_CLIENT_TOKEN",
        "AKAMAI_HOST",
        "AWS_ACCESS_KEY_ID",
        "AWS_SECRET_ACCESS_KEY",
        "AWS_SESSION_TOKEN",
        "CCI_LDAP_URL",
        "CCI_ADMIN_USER",
        "CCI_ADMIN_PASSWORD",
        "AAD_CONTROLTOWER_ROLEACCESS_SECRET",
        "AAD_PYTHON_AZUREAD_AWS_SECRET",
        "AWS_SSO_IDENTITY_STORE_ID",
        "AWS_SSO_IDENTITY_STORE_ARN",
        "AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS",
        "AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS",
        "AWS_GLOBAL_GROUP_ID_POWER_USER",
        "AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS",
        "TEAMS_INCOMING_HOOK_URL"
      ],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "ttl.sh/clearly-gen3:latest",
      "long_running": false,
      "on_start": null,
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"test_ldap_connection\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>python /app/main.py test_ldap_connection<br/>...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: ttl.sh/clearly-gen3:latest\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n        Secrets(\"Secrets:<br/>AKAMAI_ACCESS_TOKEN<br/>AKAMAI_CLIENT_SECRET<br/>AKAMAI_CLIENT_TOKEN<br/>AKAMAI_HOST<br/>AWS_ACCESS_KEY_ID<br/>AWS_SECRET_ACCESS_KEY<br/>AWS_SESSION_TOKEN<br/>CCI_LDAP_URL<br/>CCI_ADMIN_USER<br/>CCI_ADMIN_PASSWORD<br/>AAD_CONTROLTOWER_ROLEACCESS_SECRET<br/>AAD_PYTHON_AZUREAD_AWS_SECRET<br/>AWS_SSO_IDENTITY_STORE_ID<br/>AWS_SSO_IDENTITY_STORE_ARN<br/>AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS<br/>AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS<br/>AWS_GLOBAL_GROUP_ID_POWER_USER<br/>AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS<br/>TEAMS_INCOMING_HOOK_URL\"):::envClass\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    },
    {
      "name": "sync_workspaces_with_ad",
      "source": null,
      "alias": null,
      "description": "Sync workspaces with AD",
      "type": "docker",
      "content": "\npython /app/main.py sync_workspaces_with_ad\n",
      "content_url": null,
      "args": [],
      "env": [],
      "secrets": [
        "AKAMAI_ACCESS_TOKEN",
        "AKAMAI_CLIENT_SECRET",
        "AKAMAI_CLIENT_TOKEN",
        "AKAMAI_HOST",
        "AWS_ACCESS_KEY_ID",
        "AWS_SECRET_ACCESS_KEY",
        "AWS_SESSION_TOKEN",
        "CCI_LDAP_URL",
        "CCI_ADMIN_USER",
        "CCI_ADMIN_PASSWORD",
        "AAD_CONTROLTOWER_ROLEACCESS_SECRET",
        "AAD_PYTHON_AZUREAD_AWS_SECRET",
        "AWS_SSO_IDENTITY_STORE_ID",
        "AWS_SSO_IDENTITY_STORE_ARN",
        "AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS",
        "AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS",
        "AWS_GLOBAL_GROUP_ID_POWER_USER",
        "AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS",
        "TEAMS_INCOMING_HOOK_URL"
      ],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "ttl.sh/clearly-gen3:latest",
      "long_running": false,
      "on_start": null,
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"sync_workspaces_with_ad\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>python /app/main.py sync_workspaces_with_ad<br/>...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: ttl.sh/clearly-gen3:latest\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n        Secrets(\"Secrets:<br/>AKAMAI_ACCESS_TOKEN<br/>AKAMAI_CLIENT_SECRET<br/>AKAMAI_CLIENT_TOKEN<br/>AKAMAI_HOST<br/>AWS_ACCESS_KEY_ID<br/>AWS_SECRET_ACCESS_KEY<br/>AWS_SESSION_TOKEN<br/>CCI_LDAP_URL<br/>CCI_ADMIN_USER<br/>CCI_ADMIN_PASSWORD<br/>AAD_CONTROLTOWER_ROLEACCESS_SECRET<br/>AAD_PYTHON_AZUREAD_AWS_SECRET<br/>AWS_SSO_IDENTITY_STORE_ID<br/>AWS_SSO_IDENTITY_STORE_ARN<br/>AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS<br/>AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS<br/>AWS_GLOBAL_GROUP_ID_POWER_USER<br/>AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS<br/>TEAMS_INCOMING_HOOK_URL\"):::envClass\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    },
    {
      "name": "sync_billing_group_workspaces",
      "source": null,
      "alias": null,
      "description": "Sync billing group workspaces",
      "type": "docker",
      "content": "\npython /app/main.py sync_billing_group_workspaces\n",
      "content_url": null,
      "args": [],
      "env": [],
      "secrets": [
        "AKAMAI_ACCESS_TOKEN",
        "AKAMAI_CLIENT_SECRET",
        "AKAMAI_CLIENT_TOKEN",
        "AKAMAI_HOST",
        "AWS_ACCESS_KEY_ID",
        "AWS_SECRET_ACCESS_KEY",
        "AWS_SESSION_TOKEN",
        "CCI_LDAP_URL",
        "CCI_ADMIN_USER",
        "CCI_ADMIN_PASSWORD",
        "AAD_CONTROLTOWER_ROLEACCESS_SECRET",
        "AAD_PYTHON_AZUREAD_AWS_SECRET",
        "AWS_SSO_IDENTITY_STORE_ID",
        "AWS_SSO_IDENTITY_STORE_ARN",
        "AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS",
        "AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS",
        "AWS_GLOBAL_GROUP_ID_POWER_USER",
        "AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS",
        "TEAMS_INCOMING_HOOK_URL"
      ],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "ttl.sh/clearly-gen3:latest",
      "long_running": false,
      "on_start": null,
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"sync_billing_group_workspaces\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>python /app/main.py sync_billing_group_workspaces...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: ttl.sh/clearly-gen3:latest\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n        Secrets(\"Secrets:<br/>AKAMAI_ACCESS_TOKEN<br/>AKAMAI_CLIENT_SECRET<br/>AKAMAI_CLIENT_TOKEN<br/>AKAMAI_HOST<br/>AWS_ACCESS_KEY_ID<br/>AWS_SECRET_ACCESS_KEY<br/>AWS_SESSION_TOKEN<br/>CCI_LDAP_URL<br/>CCI_ADMIN_USER<br/>CCI_ADMIN_PASSWORD<br/>AAD_CONTROLTOWER_ROLEACCESS_SECRET<br/>AAD_PYTHON_AZUREAD_AWS_SECRET<br/>AWS_SSO_IDENTITY_STORE_ID<br/>AWS_SSO_IDENTITY_STORE_ARN<br/>AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS<br/>AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS<br/>AWS_GLOBAL_GROUP_ID_POWER_USER<br/>AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS<br/>TEAMS_INCOMING_HOOK_URL\"):::envClass\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    },
    {
      "name": "get_created_workspaces_names",
      "source": null,
      "alias": null,
      "description": "Get created workspaces names for directory",
      "type": "docker",
      "content": "\npython /app/main.py get_created_workspaces_names_for_directory {directory_id}\n",
      "content_url": null,
      "args": [
        {
          "name": "directory_id",
          "type": null,
          "description": "Directory ID",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        }
      ],
      "env": [],
      "secrets": [
        "AKAMAI_ACCESS_TOKEN",
        "AKAMAI_CLIENT_SECRET",
        "AKAMAI_CLIENT_TOKEN",
        "AKAMAI_HOST",
        "AWS_ACCESS_KEY_ID",
        "AWS_SECRET_ACCESS_KEY",
        "AWS_SESSION_TOKEN",
        "CCI_LDAP_URL",
        "CCI_ADMIN_USER",
        "CCI_ADMIN_PASSWORD",
        "AAD_CONTROLTOWER_ROLEACCESS_SECRET",
        "AAD_PYTHON_AZUREAD_AWS_SECRET",
        "AWS_SSO_IDENTITY_STORE_ID",
        "AWS_SSO_IDENTITY_STORE_ARN",
        "AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS",
        "AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS",
        "AWS_GLOBAL_GROUP_ID_POWER_USER",
        "AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS",
        "TEAMS_INCOMING_HOOK_URL"
      ],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "ttl.sh/clearly-gen3:latest",
      "long_running": false,
      "on_start": null,
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"get_created_workspaces_names\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n        Param0(\"directory_id (Optional)<br/>Directory ID\"):::paramClass\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>python /app/main.py get_created_workspaces_names_...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: ttl.sh/clearly-gen3:latest\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n        Secrets(\"Secrets:<br/>AKAMAI_ACCESS_TOKEN<br/>AKAMAI_CLIENT_SECRET<br/>AKAMAI_CLIENT_TOKEN<br/>AKAMAI_HOST<br/>AWS_ACCESS_KEY_ID<br/>AWS_SECRET_ACCESS_KEY<br/>AWS_SESSION_TOKEN<br/>CCI_LDAP_URL<br/>CCI_ADMIN_USER<br/>CCI_ADMIN_PASSWORD<br/>AAD_CONTROLTOWER_ROLEACCESS_SECRET<br/>AAD_PYTHON_AZUREAD_AWS_SECRET<br/>AWS_SSO_IDENTITY_STORE_ID<br/>AWS_SSO_IDENTITY_STORE_ARN<br/>AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS<br/>AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS<br/>AWS_GLOBAL_GROUP_ID_POWER_USER<br/>AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS<br/>TEAMS_INCOMING_HOOK_URL\"):::envClass\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    },
    {
      "name": "power_on_stopped_workspaces",
      "source": null,
      "alias": null,
      "description": "Power on stopped workspaces for directory",
      "type": "docker",
      "content": "\npython /app/main.py power_on_stopped_workspaces {directory_id}\n",
      "content_url": null,
      "args": [
        {
          "name": "directory_id",
          "type": null,
          "description": "Directory ID",
          "required": null,
          "default": null,
          "options": null,
          "options_from": null
        }
      ],
      "env": [],
      "secrets": [
        "AKAMAI_ACCESS_TOKEN",
        "AKAMAI_CLIENT_SECRET",
        "AKAMAI_CLIENT_TOKEN",
        "AKAMAI_HOST",
        "AWS_ACCESS_KEY_ID",
        "AWS_SECRET_ACCESS_KEY",
        "AWS_SESSION_TOKEN",
        "CCI_LDAP_URL",
        "CCI_ADMIN_USER",
        "CCI_ADMIN_PASSWORD",
        "AAD_CONTROLTOWER_ROLEACCESS_SECRET",
        "AAD_PYTHON_AZUREAD_AWS_SECRET",
        "AWS_SSO_IDENTITY_STORE_ID",
        "AWS_SSO_IDENTITY_STORE_ARN",
        "AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS",
        "AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS",
        "AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS",
        "AWS_GLOBAL_GROUP_ID_POWER_USER",
        "AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS",
        "TEAMS_INCOMING_HOOK_URL"
      ],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "ttl.sh/clearly-gen3:latest",
      "long_running": false,
      "on_start": null,
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"power_on_stopped_workspaces\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n        Param0(\"directory_id (Optional)<br/>Directory ID\"):::paramClass\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>python /app/main.py power_on_stopped_workspaces {...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: ttl.sh/clearly-gen3:latest\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n        Secrets(\"Secrets:<br/>AKAMAI_ACCESS_TOKEN<br/>AKAMAI_CLIENT_SECRET<br/>AKAMAI_CLIENT_TOKEN<br/>AKAMAI_HOST<br/>AWS_ACCESS_KEY_ID<br/>AWS_SECRET_ACCESS_KEY<br/>AWS_SESSION_TOKEN<br/>CCI_LDAP_URL<br/>CCI_ADMIN_USER<br/>CCI_ADMIN_PASSWORD<br/>AAD_CONTROLTOWER_ROLEACCESS_SECRET<br/>AAD_PYTHON_AZUREAD_AWS_SECRET<br/>AWS_SSO_IDENTITY_STORE_ID<br/>AWS_SSO_IDENTITY_STORE_ARN<br/>AWS_PERMISSION_SET_ARN_READ_ONLY_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_ACCESS<br/>AWS_PERMISSION_SET_ARN_POWER_USER_PLUS_ACCESS<br/>AWS_PERMISSION_SET_ARN_ADMINISTRATOR_ACCESS<br/>AWS_GLOBAL_GROUP_ID_POWER_USER<br/>AWS_GLOBAL_GROUP_ID_POWER_USER_PLUS<br/>TEAMS_INCOMING_HOOK_URL\"):::envClass\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    }
  ],
  "errors": [],
  "python_bundle_version": "3.11.9"
}